'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO

' Se elimino un ; agregado de mas por un error de GOLD Parser y se elimino el import no utilizado


Module MyParser
    Private Parser As New GOLD.Parser
    Public arbol As AST

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Comment] = 2                             ' Comment
        [Newline] = 3                             ' NewLine
        [Whitespace] = 4                          ' Whitespace
        [Timesdiv] = 5                            ' '*/'
        [Divtimes] = 6                            ' '/*'
        [Divdiv] = 7                              ' '//'
        [Minus] = 8                               ' '-'
        [Amp] = 9                                 ' '&'
        [Lparen] = 10                             ' '('
        [Rparen] = 11                             ' ')'
        [Times] = 12                              ' '*'
        [Div] = 13                                ' '/'
        [Semi] = 14                               ' ';'
        [Lbrace] = 15                             ' '{'
        [Rbrace] = 16                             ' '}'
        [Plus] = 17                               ' '+'
        [Lt] = 18                                 ' '<'
        [Eq] = 19                                 ' '='
        [Gt] = 20                                 ' '>'
        [Cadena] = 21                             ' CADENA
        [Decimal] = 22                            ' DECIMAL
        [Else] = 23                               ' else
        [Entero] = 24                             ' ENTERO
        [Id] = 25                                 ' ID
        [If] = 26                                 ' if
        [Imprimir] = 27                           ' imprimir
        [Mientras] = 28                           ' mientras
        [Numero] = 29                             ' numero
        [Exp_cadena] = 30                         ' <Exp_Cadena>
        [Exp_logica] = 31                         ' <Exp_Logica>
        [Exp_numerica] = 32                       ' <Exp_numerica>
        [Ini] = 33                                ' <Ini>
        [Instruccion] = 34                        ' <Instruccion>
        [Instrucciones] = 35                      ' <Instrucciones>
        [Multexp] = 36                            ' <Mult Exp>
        [Negateexp] = 37                          ' <Negate Exp>
        [Value] = 38                              ' <Value>
    End Enum

    Private Enum ProductionIndex
        [Ini] = 0                                 ' <Ini> ::= <Instrucciones>
        [Instrucciones] = 1                       ' <Instrucciones> ::= <Instrucciones> <Instruccion>
        [Instrucciones2] = 2                      ' <Instrucciones> ::= <Instruccion>
        [Instruccion_Imprimir_Lparen_Rparen_Semi] = 3 ' <Instruccion> ::= imprimir '(' <Exp_Cadena> ')' ';'
        [Instruccion_Mientras_Lparen_Rparen_Lbrace_Rbrace] = 4 ' <Instruccion> ::= mientras '(' <Exp_Logica> ')' '{' <Instrucciones> '}'
        [Instruccion_If_Lparen_Rparen_Lbrace_Rbrace] = 5 ' <Instruccion> ::= if '(' <Exp_Logica> ')' '{' <Instrucciones> '}'
        [Instruccion_If_Lparen_Rparen_Lbrace_Rbrace_Else_Lbrace_Rbrace] = 6 ' <Instruccion> ::= if '(' <Exp_Logica> ')' '{' <Instrucciones> '}' else '{' <Instrucciones> '}'
        [Instruccion_Numero_Id_Semi] = 7          ' <Instruccion> ::= numero ID ';'
        [Instruccion_Id_Eq_Semi] = 8              ' <Instruccion> ::= ID '=' <Exp_numerica> ';'
        [Exp_logica_Lt] = 9                       ' <Exp_Logica> ::= <Exp_numerica> '<' <Exp_numerica>
        [Exp_logica_Gt] = 10                      ' <Exp_Logica> ::= <Exp_numerica> '>' <Exp_numerica>
        [Exp_cadena_Amp] = 11                     ' <Exp_Cadena> ::= <Exp_Cadena> '&' <Exp_Cadena>
        [Exp_cadena_Cadena] = 12                  ' <Exp_Cadena> ::= CADENA
        [Exp_cadena] = 13                         ' <Exp_Cadena> ::= <Exp_numerica>
        [Exp_numerica_Plus] = 14                  ' <Exp_numerica> ::= <Exp_numerica> '+' <Mult Exp>
        [Exp_numerica_Minus] = 15                 ' <Exp_numerica> ::= <Exp_numerica> '-' <Mult Exp>
        [Exp_numerica] = 16                       ' <Exp_numerica> ::= <Mult Exp>
        [Multexp_Times] = 17                      ' <Mult Exp> ::= <Mult Exp> '*' <Negate Exp>
        [Multexp_Div] = 18                        ' <Mult Exp> ::= <Mult Exp> '/' <Negate Exp>
        [Multexp] = 19                            ' <Mult Exp> ::= <Negate Exp>
        [Negateexp_Minus] = 20                    ' <Negate Exp> ::= '-' <Value>
        [Negateexp] = 21                          ' <Negate Exp> ::= <Value>
        [Value_Entero] = 22                       ' <Value> ::= ENTERO
        [Value_Decimal] = 23                      ' <Value> ::= DECIMAL
        [Value_Id] = 24                           ' <Value> ::= ID
        [Value_Lparen_Rparen] = 25                ' <Value> ::= '(' <Exp_numerica> ')'
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        ' Metodo utilizado para cargar las tablas de análisis, es necesario que se cambie el nombre
        ' de GramaticaCompilada.egt al nombre con el que hayamos creado nuestras tablas
        Parser.LoadTables(Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "GramaticaCompilada.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                ' Para implementar una recuperacion de errores de deberia de cambiar
                ' de Done = True a Done = False y utlizar el metodo Parser.DiscardCurrentToken;

                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    ' Se encontro un caracter desconocido durante el analisis
                    Done = True


                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    ' Se esperaba un token diferente
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    '.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    ' Entrada Aceptada!

                    ' En esta produccion se crea el nodo raiz de nuestro arbol de analisis sintactico.
                    ' Utilizaremos el metodo CreateNewObject en donde se incrustaron las sentencias de codigo
                    ' para crear nuestro propio arbol utilizando el patron interpreter.

                    Done = True
                    Accepted = True
                    ' Se crea nuestro propio arbol de analisis sintactico utilizando la raiz
                    ' del arbol de GOLD Parser para comenzar a recorrerlo
                    arbol = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Public Function obtenerArbol() As AST
        Return arbol
    End Function

    ' En el siguiente metodo se construye nuestro arbol de analisis sintáctico
    ' Es una de las partes mas importantes de nuestro proyecto ya que muestra como se deben retornar los 
    ' objetos a manera de construir un arbol n-ario que facilite la ejecución del codigo
    ' En cada uno de los estados esta comentada la produccion a la que pertenece para poder identificar los objetos de mejor manera
    ' Funciona de manera recursiva, realizando recorridos desde la raiz hasta las hojas y volviendo a subir

    Private Function CreateNewObject(Reduction as GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex                        
                Case ProductionIndex.Ini
                    ' <Ini> ::= <Instrucciones> 
                    Return New AST(CreateNewObject(Reduction.Data(0)))
                Case ProductionIndex.Instrucciones
                    ' <Instrucciones> ::= <Instrucciones> <Instruccion> 
                    Dim instructionList As LinkedList(Of Instruccion) = CreateNewObject(Reduction.Data(0))
                    instructionList.AddLast(CreateNewObject(Reduction.Data(1)))
                    Return instructionList

                Case ProductionIndex.Instrucciones2
                    ' <Instrucciones> ::= <Instruccion> 
                    Dim instructionList As New LinkedList(Of Instruccion)
                    instructionList.AddLast(CreateNewObject(Reduction.Data(0)))
                    Return instructionList

                Case ProductionIndex.Instruccion_Imprimir_Lparen_Rparen_Semi
                    ' <Instruccion> ::= imprimir '(' <Exp_Cadena> ')' ';' 
                    Return New Imprimir(CreateNewObject(Reduction.Data(2)))

                Case ProductionIndex.Instruccion_Mientras_Lparen_Rparen_Lbrace_Rbrace
                    ' <Instruccion> ::= mientras '(' <Exp_Logica> ')' '{' <Instrucciones> '}' 
                    Return New Mientras(CreateNewObject(Reduction.Data(2)), CreateNewObject(Reduction.Data(5)))

                Case ProductionIndex.Instruccion_If_Lparen_Rparen_Lbrace_Rbrace
                    ' <Instruccion> ::= if '(' <Exp_Logica> ')' '{' <Instrucciones> '}' 
                    Return New If_Statement(CreateNewObject(Reduction.Data(2)), CreateNewObject(Reduction.Data(5)))

                Case ProductionIndex.Instruccion_If_Lparen_Rparen_Lbrace_Rbrace_Else_Lbrace_Rbrace
                    ' <Instruccion> ::= if '(' <Exp_Logica> ')' '{' <Instrucciones> '}' else '{' <Instrucciones> '}' 
                    Return New If_Statement(CreateNewObject(Reduction.Data(2)), CreateNewObject(Reduction.Data(5)), CreateNewObject(Reduction.Data(9)))

                Case ProductionIndex.Instruccion_Numero_Id_Semi
                    ' <Instruccion> ::= numero ID ';' 
                    Return New Declaracion(Reduction.Data(1).ToString(), Simbolo.Tipo_Var.Numero)

                Case ProductionIndex.Instruccion_Id_Eq_Semi
                    ' <Instruccion> ::= ID '=' <Exp_numerica> ';' 
                    Return New Asignacion(Reduction.Data(0).ToString(), CreateNewObject(Reduction.Data(2)))

                Case ProductionIndex.Exp_logica_Lt
                    ' <Exp_Logica> ::= <Exp_numerica> '<' <Exp_numerica> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.MENOR_QUE)

                Case ProductionIndex.Exp_logica_Gt
                    ' <Exp_Logica> ::= <Exp_numerica> '>' <Exp_numerica> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.MAYOR_QUE)

                Case ProductionIndex.Exp_cadena_Amp
                    ' <Exp_Cadena> ::= <Exp_Cadena> '&' <Exp_Cadena> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.CONCATENACION)

                Case ProductionIndex.Exp_cadena_Cadena
                    ' <Exp_Cadena> ::= CADENA 
                    Return New Operacion(Reduction.Data(0).ToString(), Operacion.Tipo_operacion.CADENA)

                Case ProductionIndex.Exp_cadena
                    ' <Exp_Cadena> ::= <Exp_numerica> 
                    Return CreateNewObject(Reduction.Data(0))

                Case ProductionIndex.Exp_numerica_Plus
                    ' <Exp_numerica> ::= <Exp_numerica> '+' <Mult Exp> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.SUMA)

                Case ProductionIndex.Exp_numerica_Minus
                    ' <Exp_numerica> ::= <Exp_numerica> '-' <Mult Exp> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.RESTA)

                Case ProductionIndex.Exp_numerica
                    ' <Exp_numerica> ::= <Mult Exp> 
                    Return CreateNewObject(Reduction.Data(0))

                Case ProductionIndex.Multexp_Times
                    ' <Mult Exp> ::= <Mult Exp> '*' <Negate Exp> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.MULTIPLICACION)

                Case ProductionIndex.Multexp_Div
                    ' <Mult Exp> ::= <Mult Exp> '/' <Negate Exp> 
                    Return New Operacion(CreateNewObject(Reduction.Data(0)), CreateNewObject(Reduction.Data(2)), Operacion.Tipo_operacion.DIVISION)

                Case ProductionIndex.Multexp
                    ' <Mult Exp> ::= <Negate Exp> 
                    Return CreateNewObject(Reduction.Data(0))

                Case ProductionIndex.Negateexp_Minus
                    ' <Negate Exp> ::= '-' <Value> 
                    Return New Operacion(CType(CreateNewObject(Reduction.Data(1)), Operacion), Operacion.Tipo_operacion.NEGATIVO)

                Case ProductionIndex.Negateexp
                    ' <Negate Exp> ::= <Value> 
                    Return CreateNewObject(Reduction.Data(0))

                Case ProductionIndex.Value_Entero
                    ' <Value> ::= ENTERO 
                    Return New Operacion(Double.Parse(Reduction.Data(0)))

                Case ProductionIndex.Value_Decimal
                    ' <Value> ::= DECIMAL 
                    Return New Operacion(Double.Parse(Reduction.Data(0)))

                Case ProductionIndex.Value_Id
                    ' <Value> ::= ID 
                    Return New Operacion(Reduction.Data(0).ToString(), Operacion.Tipo_operacion.IDENTIFICADOR)

                Case ProductionIndex.Value_Lparen_Rparen
                    ' <Value> ::= '(' <Exp_numerica> ')' 
                    Return CreateNewObject(Reduction.Data(1))


            End Select
        End With     

        Return Result
    End Function
End Module
